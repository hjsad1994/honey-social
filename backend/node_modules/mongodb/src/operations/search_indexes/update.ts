import type { Document } from '../../bson.js';
import type { Collection } from '../../collection.js';
import type { Server } from '../../sdam/server.js';
import type { ClientSession } from '../../sessions.js';
import { type TimeoutContext } from '../../timeout.js';
import { AbstractOperation } from '../operation.js';

/** @internal */
export class UpdateSearchIndexOperation extends AbstractOperation<void> {
  constructor(
    private readonly collection: Collection,
    private readonly name: string,
    private readonly definition: Document
  ) {
    super();
  }

  override get commandName() {
    return 'updateSearchIndex' as const;
  }

  override async execute(
    server: Server,
    session: ClientSession | undefined,
    timeoutContext: TimeoutContext
  ): Promise<void> {
    const namespace = this.collection.fullNamespace;
    const command = {
      updateSearchIndex: namespace.collection,
      name: this.name,
      definition: this.definition
    };

    await server.command(namespace, command, { session, timeoutContext });
    return;
  }
}
