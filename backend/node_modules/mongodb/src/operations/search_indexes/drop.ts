import type { Document } from '../../bson.js';
import type { Collection } from '../../collection.js';
import { MONGODB_ERROR_CODES, MongoServerError } from '../../error.js';
import type { Server } from '../../sdam/server.js';
import type { ClientSession } from '../../sessions.js';
import { type TimeoutContext } from '../../timeout.js';
import { AbstractOperation } from '../operation.js';

/** @internal */
export class DropSearchIndexOperation extends AbstractOperation<void> {
  constructor(
    private readonly collection: Collection,
    private readonly name: string
  ) {
    super();
  }

  override get commandName() {
    return 'dropSearchIndex' as const;
  }

  override async execute(
    server: Server,
    session: ClientSession | undefined,
    timeoutContext: TimeoutContext
  ): Promise<void> {
    const namespace = this.collection.fullNamespace;

    const command: Document = {
      dropSearchIndex: namespace.collection
    };

    if (typeof this.name === 'string') {
      command.name = this.name;
    }

    try {
      await server.command(namespace, command, { session, timeoutContext });
    } catch (error) {
      const isNamespaceNotFoundError =
        error instanceof MongoServerError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound;
      if (!isNamespaceNotFoundError) {
        throw error;
      }
    }
  }
}
